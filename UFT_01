测试工作可以量化：
	测试用例的设计
	测试用量执行（非智力创造性）

测试阶段：
	回归测试： 每一次迭代

-----------------------------
软件自动化测试的产生：
	软件测试的工作量大
	软件测试包含了大量的重复性操作性
	软件测试的大部分工作为非智力创造性
	测试过程中手工模拟真实环境困难
	手工测试获得的测试结果不精确

软件自动化测试的意义：
	减少了测试人员的工作量
	提高了测试效率 （并不是工具引入就能提升效率）
	增强了测试的准确性
	无人值守、自动运行 （自动收集，自动产生报告）-减少用例执行的时间

自动化测试主要在回归测试阶段

性能测试必须通过工具去完成 - 也属于软件功能测试的一种，时间／空间-数量
精确性（ms 毫秒 3位数毫秒 几位数）
	1- 登陆本身，失败测试
	2- 较短的时间内是否允许 500个用户同时登陆 （时间／数量）




测试基线：一轮手工测试-及时都是Positive测试

工具： 执行
设计，执行，发现缺陷，跟踪

自动测试流程：
	自动测试决定：
		1. 
	测试工具获取：

	自动化测试引入：
		时间节点：计划决定阶段，自动化测试只是替代回归测试，还是其他测试阶段的手工部分

	测试计划、设计与开发：
		测试计划：不是项目测试计划，当前测试软件在做自动化测试阶段的计划
				 脚本开发

	测试执行与管理：

	测试评审和评估：

如何开展自动化测试（反复多次执行）
	自动化测试只有在多次运行后，才能体现出自动化的优势，只有不断地运行自动测试，才能有效预防缺陷、减轻测试人员手工的回归测试的工作量
	磨合的过程

	短期，一次性项目
	进度非常紧迫

自动化何时介入：
	界面未定后，可以考入介入

测试工程师需要掌握的技能要求：
	测试技术理论，编程能力-脚本级别要求，工具使用能力
自动化测试成本： 
	
	自动化测试环境 （）
	人力 （人员知识体系更加宽）

========================= 自动化测试方案： =================================

选取需要考虑的因素（如果答案都是肯定／良性的，才决定自定怎么样的自动化方案）：
	项目的影响： 自动化测试能否对项目进度、 覆盖率、风险有积极的作用，或者让开发敏捷
		对于项目的影响都是良性的
	复杂度： 自动化是否容易实现，包括数据和其他环境的影响
			如： 数据准备的复杂度会比手工测试复杂，手工测试可以泡一条用例前再准备
		自动化-需要一次性执行完，实现全部准备好
	时间： 自动测试的实现需要多少时间  - 节省时间，大大减少
	早期需求和代码的稳定性： 需求或早期的代码是否能证明是在一定范围内变化的
	编码维护工作量： 代码是否能长期保持相对稳定？ 功能特性是否会进化
	覆盖率： 自动化测试能否覆盖程序的关特性和功能
	资源： 测试组是否拥有足够的人力资源、 硬件资源和数据资源来进行自动化测试
	自动化测试的执行： 负责执行自动化测试的小组是否拥有足够的技能和时间运行自动化测试

========================= 自动化测试脚本编写方法 =========================
自动化测试框架（包括一下三个内容）：
	工具：决定未来脚本的编写 （QTP／Selenium）PC端／数据采集和分析工具之间是不一样的
		脚本： 用例，数据，代码
		用例： input - output
	被测软件： BS，CS （PC端） selenium支持 CS不好 ／ QTP BS/CS都可以

自动化测试脚本编写方法：

	线性脚本的编写方法：
			--一种非结构化的编写方式
		测试用例由脚本定义
		非常低的开发成本
		测试人员所需要的编程方面技能几乎可以忽略
		不需要计划、设计
			测试数据在脚本中是硬编码的
		脚本很脆弱，因此维护成本很高
		没有公用的脚本，因此可能造成重复劳动
	结构化的脚本的编写方法：
			引入结构化的脚本编写方法 （if else, for...while,switch）
			测试数据也是在脚本中被硬编码
	共享脚本的编写方法：
		测试数据的使用可以多脚本使用

	数据驱动脚本的编写方法：

		数据独立存储在数据表或外部文件（数据可以修改）
关键字驱动脚本的编写方法：
			综合了数据驱动脚本编写方法、 共享脚本的编写方法、 结构化脚本编写方法
		测试用例由数据定义
		开发成本高， 因为需要更多的测试计划和设计、开发方面的投入
		需要测试人员有很强的编码能力
		最初的计划和设计、管理成本比较大
		数据在外部文件存储
		维护成本较低
			需要额外的框架或库，因此测试人员需要更多的编码技巧
			会用脚本中，使用关键字来区分被测控件

	录制，回放
	被测试控件- 关键字区分控件 
		HTML - 表单 - Type（submit／input）／NAME=“” 
			B/S系统中，Name属性和属性值一定要有。“每个控件的变量名称，装用户输入的Value”
			login - 需要两个查询，这两个分开写-安全角度，防止SQL注入写在一块的时候

========================= 测试工具选择 =========================
多项目，长期使用： 
小公司，小项目，一部分解决手工测试： 可以选择开源的工具

只买对的，不买贵的
选择主流的测试工具 （Robot - 国内不多，QTP - 解决方案多）出问题的话，解决方案更多
分阶段、逐步引入测试工具 （需要的时候引入，一步一步来）
选择技术支持完善的产品
如需多种工具， 尽量选择一个公司的产品


HP-UFT 11.5
HP-ALM QC
RoadRunner - performance Testing 
robot - IBM 
Selenium （硒-）- 开源自动化测试工具 
	MyQuery - 水星

=====================	UFT  ===================
- HP公司的关键字驱动的功能测试工具
- 支持的脚本语言： VBScript
- 擅长： JAVA J2EE，， WEB， .NET VB.NET, C#.NET
- WinRunner 的主流测试工具

BS CS Selenium支持 BS比较好
CS - 冒烟测试：安装

===========  登陆 ==========
- 正确用户名密码
- 字符串类型（数字，字母，特殊字符），长度

定制测试计划 
	|
创建测试脚本  - 录制
	|
增强测试脚本功能 - 利用工具本省的功能，用它支持的脚本语言进行(顺序跑 -> 循环跑)
	|
运行测试 
	|
分析测试结果


项目测试计划：

定制测试计划：
	自动测试的测试计划是根据被测试项目的需求，以及所使用的测试工具的自身特点而定制的，它完全用于指导自动化测试过程
创建测试脚本：
	QTP的自动录制机制能够将测试人员的每一个操作步骤及被操作的对象记录下来，自动生成测试脚本语言，还将被操作的对象及相应的动作按照层次和顺序保存在一个基于表格的关键字视图中

增强测试脚本的功能（重点关注）
	QTP允许测试人员通过在脚本中增加或更改测试步骤来修正或自定义测试流程
运行测试
	QTP从脚本第一行开始， 逐行执行语句，运行过程中会设置的检查点进行验证，用实际数据代替参数值，并给出相应的输出结果信息
分析测试
	运行结束后系统会自动生成一份详细完整的测试结果报告



======================== UFT录制回放 =======================



======================== UFT 测试对象管理机制 =======================

类： 美女
实例： 和他具体唱歌的是具体的一个，而不是全部的美女
请用最少的描述来区分：

UFT管理控件的机制：
 	通过关键属性名和值的不同来区分不同的控件
	快速识别两个相似控件之间的差别

UFT／QTP录制脚本时，
	会自动获取被操作对象的一系列属性信息，
	然后将对象连同它的属性信息存在自己的对象仓库中
在UFT中，
	每一个测试都对应着至少一个对象仓库，测试人员在心间或打开一个测试的同时，也加载了	相应的对象仓库
在QTP按照关键字视图中的顺序回放脚本时，
	首先会在对象仓库中找到对象，然后根据对象仓库中描述的
	对象属性，在被测试应用中定位到对象，然后执行相应的动作

如果运行脚本时，报错：
	一个对象的一个或多个属性值发生变化

关键字视图：
	 Item／Operation／Value/分配／

	Right Click > 对象属性 > 描述属性中的都是这个对象的关键属性
		UFT执行脚本时只关注关键属性名字和值
		> + 中可以拿到所有的属性

创建测试：
	获取被操作对象的属性信息
	1.使用唯一的对象名在对象仓库中记录该对象
	2. 将对象的全部属性信息存放在数据仓库中
	3. 标识关键属性信息
	4. 在脚本中记录对象名称和对应的动作

运行测试：	
	1. 从脚本中获得对象名称
	2. 在对象仓库中定位对象，并获取其关键属性
	3. 根据关键属性信息在被测试应用中定位对象
	4. 根据脚本中录入的动作执行相应的操作

UFT MENUE > Resources > Object Repository... > 
	> 
		> 定义新测试对象： ActiveX 、 Standard Windows、Visual Basic、 Web
		  UFT打开时，需要先加载相应的标准对象仓库，才能对应的控件进行识别
		  所以打开时才需要加载不同的插件（许可证类型有多少种）
		  	取决于他有没有这个插件的许可证
		  	！许可证 = 该类别的对象仓库


UFT MENUE > 
		> Recording and setings..> WEB (BS)/
			- 打开什么录制什么
			- 指定哦歌网站

			>Windows Application (CS)
脚本内容：
01
	SystemUtil.Run "xxx01", "", "xxx03", "open"
	xxx01: 应用程序的完整路径 (桌面右键查看)
	xxx02：
	xxx03: 只要应用程序的路径
			\x86 32 bit
02

Menue > Object Spy? 对象侦测器


======================== UFT 检查点 =======================
面试UFT使用： 你是怎么理解这个工具的 ，你用它做了什么事

可以提升我们的测试效率，较少手工测试的工作量
它的脚本基于关键字驱动的
这个工具有非常强大的对象仓库，
	需要选择插件，选择某个意味着加载了相应的对象仓库，有了对象仓库可以去录制
脚本录制的时候
脚本回放的时候
识别错误：
	当录制回放时，关键属性的名字和值发生变化的时候
	回放时，出现脚本没有识别的对象时，也会报错？



https://www.bilibili.com/video/av33951261/?p=15

UFT 脚本特点:
	1. 
	2.
	3.



使用QuickTest检查点
参数化输入QuickTest脚本
建立QuickTest输出值

UFT提供检查点的功能，用于验证应用程序是否在预定的状态上：
	标准检查点 （ Standard Checkpoint ）
		检查标准对象的属性信息，如某个复选框是否被选中
	位图检查点 （Bitmap Checkpoint）
		检查图片对象的属性信息， 如某个图片的来源文件是否正确
	文本检查点 （ Text Checkpoint ）
		检查网页或窗口上面的文字信息是否正确
	可访问性检查点 （ Accessibility CheckPoint）only BS
		检查网页是否满足WC网页被容访问指南的 要求
	数据库检查点 （Database Checkpoint）
		检查数据库的内容是否正确，如检查数据库的查询值是否正确
			除了录制，可以手工设置检查内容时什么
	XML检查点 （ XML Checkpoint ）
		检查XML文件的内容

异步存取数据库的一种方式：
	用户在进行数据库存取之前，提前把信息存在XML，然后用户去 XML去读数据
	或者将用户信息存入XML中

	因此出现了一种叫做： 中间件

同步存取数据库：
	安全性，性能都不好 （SQL注入等）

Checkpoint：
关键字视图 （另一个：专家视图）
	选中对象 Menue INSERT > Checkpoint
		(灰色的检查点，说明对象不支持)
		或者检查点需要录制的时候插入，如 可访问性
	右键单击 > 插入
	Active Screen > 界面当中右键单击 > 插入（位图和文本）

标准检查点：
	检查类型
	检查点超时 （wait 10）
	当前步骤之前／之后 （之后：依赖当前步骤）
	
	UFT验证控件属性：
		非关键属性 -> 关键属性
		取消智能识别
		标准检查点

位图检查点：
	1.是指将网页或应用窗口中的一部分区域作为图像进行检查，通过比较捕获时选择区域的图像
	信息和实际运行时显示的信息是否相同，来验证程序是否存在问题
	2. 创建位图检查点
	3. 选择要检查区域所属的对象
	4. 设定位图检查点的属性
	5. 运行脚本，查看检查点的运行结果

右键插入>...
	整个位图／仅选择选定区域
	RGB 容错 - 颜色的编码 （000 - fff 表示颜色）
	像素容错  

<table width=100 height=100>
<tr>
<td bgcolor="#f37788">
</td>
</tr>
</table>








